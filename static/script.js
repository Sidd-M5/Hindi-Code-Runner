// üîπ Convert Hindi digits to English digits
function normalizeHindiNumbers(code) {
  const hindiToEnglish = {
    '‡•¶': '0', '‡•ß': '1', '‡•®': '2', '‡•©': '3', '‡•™': '4',
    '‡•´': '5', '‡•¨': '6', '‡•≠': '7', '‡•Æ': '8', '‡•Ø': '9'
  };
  return code.replace(/[‡•¶-‡•Ø]/g, d => hindiToEnglish[d] || d);
}

// Expose your function globally so the HTML can call it
window.externalRunCode = async function() {
  const runButton = document.getElementById("runButton");
  const outputElement = document.getElementById("output");
  const explanationElement = document.getElementById("explanation");
  
  try {
    // Get the code using the helper function set by HTML
    const code = window.getCodeValue ? window.getCodeValue() : 
                 (window.editor ? window.editor.getValue() : 
                  document.getElementById("code").value);

    // ‚úÖ Fix Hindi numbers before sending
    const normalizedCode = normalizeHindiNumbers(code);

    outputElement.textContent = "‚åõ ‡§ï‡•ã‡§° ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à...";
    explanationElement.textContent = "‚åõ ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...";

    const response = await fetch("/run", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ hindi_code: normalizedCode }),
    });

    const result = await response.json();

    // ‚úÖ Check if there's an error using the is_error flag
    if (result.is_error) {
      // Display the Hindi-translated error
      outputElement.textContent = "‚ùå " + result.output;
      outputElement.style.color = "#ff4444";  // Red color for errors
      explanationElement.textContent = result.explanation;
      
      // Optional: Log the English error to console for debugging
      if (result.error) {
        console.error("Original error:", result.error);
      }
    } else {
      // Display successful output
      outputElement.textContent = result.output || "‚úÖ ‡§ï‡•ã‡§° ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ö‡§≤‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•ã‡§à ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ";
      outputElement.style.color = "#00ff00";  // Green color for success
      explanationElement.textContent = result.explanation || "‚ÑπÔ∏è ‡§ï‡•ã‡§° ‡§ï‡•Ä ‡§ï‡•ã‡§à ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§";
    }

  } catch (fetchError) {
    // Handle network or server errors
    outputElement.textContent = "‚ùå ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§æ: " + fetchError.message;
    outputElement.style.color = "#ff4444";
    explanationElement.textContent = "‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§";
    console.error("Fetch error:", fetchError);
  } finally {
    // Always reset the button state
    runButton.classList.remove("loading");
    runButton.innerHTML = "‚ñ∂Ô∏è ‡§ï‡•ã‡§° ‡§ö‡§≤‡§æ‡§è‡§Å";
  }
};