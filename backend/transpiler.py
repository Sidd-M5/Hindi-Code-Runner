import re

hindi_to_python_map = {
    # Functions & return
    "рдкрд░рд┐рднрд╛рд╖рд┐рдд": "def",
    "рд╡рд╛рдкрд╕_рдХрд░реЗрдВ": "return",

    # Print / Input
    "рдЫрд╛рдкреЗрдВ": "print",
    "рдЗрдирдкреБрдЯ": "input",

    # Conditions / Loops
    "рдЕрдЧрд░": "if",
    "рдЕрдиреНрдпрдерд╛": "else",
    "рдЕрдиреНрдпрдерд╛_рдЕрдЧрд░": "elif",
    "рдХреЗ_рд▓рд┐рдП": "for",
    "рдЬрдмрддрдХ": "while",

    # Boolean
    "рд╕рд╣реА": "True",
    "рдЧрд▓рдд": "False",

    # Data types
    "рд╕рдВрдЦреНрдпрд╛": "int",
    "рдкрд╛рда": "str",
    "рд╕реВрдЪреА": "list",
    "рдЯрдкрд▓": "tuple",
    "рд╢рдмреНрджрдХреЛрд╢": "dict",

    # Class / Objects
    "рд╕реНрд╡": "self",
    "рдЖрд░рдВрдн": "__init__",
    "рд╡рд░реНрдЧ": "class",
    "рд╡рд╕реНрддреБ": "object",
    "рдирдпрд╛": "new",
    "рдореЗрдВ": "in",
    "рд╕реАрдорд╛": "range"
}


def hindi_to_python(code: str) -> str:
    """
    Convert Hindi keywords to Python keywords.
    Uses word boundaries to avoid partial replacements.
    """
    for hindi_kw, py_kw in hindi_to_python_map.items():
        # Use word boundary regex to avoid replacing parts of words
        # \b doesn't work well with Hindi, so we use a simpler approach
        code = code.replace(hindi_kw, py_kw)
    
    return code


def generate_explanations(hindi_code: str) -> str:
    """
    Generate Hindi explanations for the code.
    """
    explanations = []
    lines = hindi_code.strip().split('\n')

    for line in lines:
        if "рдкрд░рд┐рднрд╛рд╖рд┐рдд" in line:
            explanations.append("ЁЯФз **рдкрд░рд┐рднрд╛рд╖рд┐рдд**: рдпрд╣ рдПрдХ рдлрд╝рдВрдХреНрд╢рди рдХреЛ рдкрд░рд┐рднрд╛рд╖рд┐рдд рдХрд░рддрд╛ рд╣реИ (def).")
        elif "рд╡рд╛рдкрд╕_рдХрд░реЗрдВ" in line:
            explanations.append("тЖйя╕П **рд╡рд╛рдкрд╕_рдХрд░реЗрдВ**: рдпрд╣ рдлрд╝рдВрдХреНрд╢рди рд╕реЗ рдПрдХ рдорд╛рди рд▓реМрдЯрд╛рддрд╛ рд╣реИ (return).")
        elif "рдЫрд╛рдкреЗрдВ" in line:
            explanations.append("ЁЯЦия╕П **рдЫрд╛рдкреЗрдВ**: рдЖрдЙрдЯрдкреБрдЯ рд╕реНрдХреНрд░реАрди рдкрд░ рджрд┐рдЦрд╛рдиреЗ рдХреЗ рд▓рд┐рдП (print).")
        elif "рдЕрдЧрд░" in line:
            explanations.append("ЁЯФН **рдЕрдЧрд░**: рд╢рд░реНрдд (if condition) рд▓рдЧрд╛рдиреЗ рдХреЗ рд▓рд┐рдП.")
        elif "рдЕрдиреНрдпрдерд╛" in line:
            explanations.append("ЁЯУМ **рдЕрдиреНрдпрдерд╛**: else block, рдЬрдм рд╢рд░реНрдд false рд╣реЛ.")
        elif "рдЕрдиреНрдпрдерд╛_рдЕрдЧрд░" in line:
            explanations.append("ЁЯФА **рдЕрдиреНрдпрдерд╛_рдЕрдЧрд░**: рдпрд╣ elif block рд╣реИ (else if condition).")
        elif "рдХреЗ_рд▓рд┐рдП" in line:
            explanations.append("ЁЯФБ **рдХреЗ_рд▓рд┐рдП**: for loop рдЪрд▓рд╛рдиреЗ рдХреЗ рд▓рд┐рдП.")
        elif "рдЬрдмрддрдХ" in line:
            explanations.append("ЁЯФБ **рдЬрдмрддрдХ**: while loop рдЪрд▓рд╛рдиреЗ рдХреЗ рд▓рд┐рдП.")
        elif "рд╕реВрдЪреА" in line:
            explanations.append("ЁЯУЛ **рд╕реВрдЪреА**: Python рдХреА list datatype (mutable, ordered).")
        elif "рдЯрдкрд▓" in line:
            explanations.append("ЁЯФЧ **рдЯрдкрд▓**: Python рдХрд╛ tuple (immutable, ordered).")
        elif "рд╢рдмреНрджрдХреЛрд╢" in line:
            explanations.append("ЁЯУЪ **рд╢рдмреНрджрдХреЛрд╢**: dictionary (key-value pairs).")
        elif "рд╕реНрд╡" in line:
            explanations.append("ЁЯСд **рд╕реНрд╡**: self keyword, object рдХреЗ current instance рдХреЛ рджрд░реНрд╢рд╛рддрд╛ рд╣реИ.")
        elif "рдЖрд░рдВрдн" in line:
            explanations.append("тЪЩя╕П **рдЖрд░рдВрдн**: рдпрд╣ constructor рд╣реИ (__init__) рдЬреЛ object рдмрдирд╛рддреЗ рд╕рдордп рдЪрд▓рддрд╛ рд╣реИ.")
        elif "рд╡рд░реНрдЧ" in line:
            explanations.append("ЁЯПЫя╕П **рд╡рд░реНрдЧ**: class define рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП.")
        else:
            explanations.append("тД╣я╕П рдпрд╣ рдПрдХ рд╕рд╛рдорд╛рдиреНрдп рд▓рд╛рдЗрди рд╣реИред")

    return "\n".join(explanations)